{
    "#": "gi0.PINF.it/core/v0",

    "#": {
        "/.~/gi0.Sourcemint.org~sm.act/snapshots-activate": "sm.act.github.actions"
    },

    ":activate:": "/.~/gi0.Sourcemint.org~sm.act/snapshots-activate @ activate/v1",

    "gi0.PINF.it/build/v0 @ # :activate: build() /.~/gi0.Sourcemint.org~sm.act/snapshots-activate": {
        "onActivate": (javascript (process, require) >>>

            const FS = require("fs").promises;
            const PATH = require("path");

            const matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
            function escapeRE (str) {
                return str.replace(matchOperatorsRe, '\\$&');
            }

            // This logic is local to sm.act.github.actions

            return async function (snapshot) {

                // Update workflow files with git ref of sm.act.github.actions to lock
                // github actions code to specific commit for exact repeated use in future.
                // This assumes the ref has been pushed to github before activating
                // or the action code will not be available when running the action on github.

                const workflowBasedir = '../../.github/workflows';
                const workflowFilenames = await FS.readdir(workflowBasedir);

                const commitRef = snapshot.meta.GIT_SHA7;

                await Promise.all(workflowFilenames.map(async function (filename) {
                    const path = PATH.join(process.cwd(), workflowBasedir, filename);

                    let content = await FS.readFile(path, 'utf8');
                    
                    const re = /(:\s*sourcemint\/sm\.act\.github\.actions\/\.github\/actions\/[^\/@]+@)([^@\s]+)(\s*)\n$/mg;
                    let m = null;
                    while ( (m = re.exec(content)) ) {
                        content = content.replace(new RegExp(escapeRE(m[0]), 'g'), `${m[1]}${commitRef}${m[3]}`);
                    }

                    await FS.outputFile(path, content, 'utf8');
                }));

                // Update README with snapshot details.

                let readme = await FS.readFile('../../README.md', 'utf8');
                let segments = readme.split('```');

                segments.forEach(function (segment, i) {

                    let replacement = null;

                    if (/^\nSM_ACT_REPO_GUID=/.test(segment)) {
                        replacement = Object.keys(snapshot.meta).map(function (name) {
                            return `SM_ACT_${name}=${snapshot.meta[name]}`;
                        }).join('\n');
                    } else
                    if (/^\n\{\n\s+"aspect":/.test(segment)) {
                        replacement = JSON.parse(JSON.stringify(snapshot));
                        replacement.env = {};
                        replacement = JSON.stringify(replacement, null, 5);
                    }

                    if (replacement) {
                        segments[i] = '\n' + replacement + '\n';
                    }
                });

                readme = segments.join('```');

                await FS.writeFile('../../README.md', readme, 'utf8');

                console.log("Updated 'README.md'.");
            }
        <<<)
    }
}